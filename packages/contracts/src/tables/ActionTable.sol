// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16("gnomik"), bytes16("ActionTable"))));
uint256 constant ActionTableTableId = _tableId;

struct ActionTableData {
  int256 costAmount1;
  int256 costAmount2;
  bool selfTarget;
  int256 resultAmount;
  string costResource1;
  string costResource2;
  string costFunction;
  string resultResource;
  string resultFunction;
  string resultType;
}

library ActionTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](10);
    _schema[0] = SchemaType.INT256;
    _schema[1] = SchemaType.INT256;
    _schema[2] = SchemaType.BOOL;
    _schema[3] = SchemaType.INT256;
    _schema[4] = SchemaType.STRING;
    _schema[5] = SchemaType.STRING;
    _schema[6] = SchemaType.STRING;
    _schema[7] = SchemaType.STRING;
    _schema[8] = SchemaType.STRING;
    _schema[9] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](10);
    _fieldNames[0] = "costAmount1";
    _fieldNames[1] = "costAmount2";
    _fieldNames[2] = "selfTarget";
    _fieldNames[3] = "resultAmount";
    _fieldNames[4] = "costResource1";
    _fieldNames[5] = "costResource2";
    _fieldNames[6] = "costFunction";
    _fieldNames[7] = "resultResource";
    _fieldNames[8] = "resultFunction";
    _fieldNames[9] = "resultType";
    return ("ActionTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get costAmount1 */
  function getCostAmount1(bytes32 action) internal view returns (int256 costAmount1) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get costAmount1 (using the specified store) */
  function getCostAmount1(IStore _store, bytes32 action) internal view returns (int256 costAmount1) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set costAmount1 */
  function setCostAmount1(bytes32 action, int256 costAmount1) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((costAmount1)));
  }

  /** Set costAmount1 (using the specified store) */
  function setCostAmount1(IStore _store, bytes32 action, int256 costAmount1) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((costAmount1)));
  }

  /** Get costAmount2 */
  function getCostAmount2(bytes32 action) internal view returns (int256 costAmount2) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get costAmount2 (using the specified store) */
  function getCostAmount2(IStore _store, bytes32 action) internal view returns (int256 costAmount2) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set costAmount2 */
  function setCostAmount2(bytes32 action, int256 costAmount2) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((costAmount2)));
  }

  /** Set costAmount2 (using the specified store) */
  function setCostAmount2(IStore _store, bytes32 action, int256 costAmount2) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((costAmount2)));
  }

  /** Get selfTarget */
  function getSelfTarget(bytes32 action) internal view returns (bool selfTarget) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get selfTarget (using the specified store) */
  function getSelfTarget(IStore _store, bytes32 action) internal view returns (bool selfTarget) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set selfTarget */
  function setSelfTarget(bytes32 action, bool selfTarget) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((selfTarget)));
  }

  /** Set selfTarget (using the specified store) */
  function setSelfTarget(IStore _store, bytes32 action, bool selfTarget) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((selfTarget)));
  }

  /** Get resultAmount */
  function getResultAmount(bytes32 action) internal view returns (int256 resultAmount) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get resultAmount (using the specified store) */
  function getResultAmount(IStore _store, bytes32 action) internal view returns (int256 resultAmount) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set resultAmount */
  function setResultAmount(bytes32 action, int256 resultAmount) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((resultAmount)));
  }

  /** Set resultAmount (using the specified store) */
  function setResultAmount(IStore _store, bytes32 action, int256 resultAmount) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((resultAmount)));
  }

  /** Get costResource1 */
  function getCostResource1(bytes32 action) internal view returns (string memory costResource1) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (string(_blob));
  }

  /** Get costResource1 (using the specified store) */
  function getCostResource1(IStore _store, bytes32 action) internal view returns (string memory costResource1) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (string(_blob));
  }

  /** Set costResource1 */
  function setCostResource1(bytes32 action, string memory costResource1) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, bytes((costResource1)));
  }

  /** Set costResource1 (using the specified store) */
  function setCostResource1(IStore _store, bytes32 action, string memory costResource1) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 4, bytes((costResource1)));
  }

  /** Push a slice to costResource1 */
  function pushCostResource1(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 4, bytes((_slice)));
  }

  /** Push a slice to costResource1 (using the specified store) */
  function pushCostResource1(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 4, bytes((_slice)));
  }

  /** Get costResource2 */
  function getCostResource2(bytes32 action) internal view returns (string memory costResource2) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 5);
    return (string(_blob));
  }

  /** Get costResource2 (using the specified store) */
  function getCostResource2(IStore _store, bytes32 action) internal view returns (string memory costResource2) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 5);
    return (string(_blob));
  }

  /** Set costResource2 */
  function setCostResource2(bytes32 action, string memory costResource2) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 5, bytes((costResource2)));
  }

  /** Set costResource2 (using the specified store) */
  function setCostResource2(IStore _store, bytes32 action, string memory costResource2) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 5, bytes((costResource2)));
  }

  /** Push a slice to costResource2 */
  function pushCostResource2(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 5, bytes((_slice)));
  }

  /** Push a slice to costResource2 (using the specified store) */
  function pushCostResource2(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 5, bytes((_slice)));
  }

  /** Get costFunction */
  function getCostFunction(bytes32 action) internal view returns (string memory costFunction) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 6);
    return (string(_blob));
  }

  /** Get costFunction (using the specified store) */
  function getCostFunction(IStore _store, bytes32 action) internal view returns (string memory costFunction) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 6);
    return (string(_blob));
  }

  /** Set costFunction */
  function setCostFunction(bytes32 action, string memory costFunction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 6, bytes((costFunction)));
  }

  /** Set costFunction (using the specified store) */
  function setCostFunction(IStore _store, bytes32 action, string memory costFunction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 6, bytes((costFunction)));
  }

  /** Push a slice to costFunction */
  function pushCostFunction(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 6, bytes((_slice)));
  }

  /** Push a slice to costFunction (using the specified store) */
  function pushCostFunction(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 6, bytes((_slice)));
  }

  /** Get resultResource */
  function getResultResource(bytes32 action) internal view returns (string memory resultResource) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 7);
    return (string(_blob));
  }

  /** Get resultResource (using the specified store) */
  function getResultResource(IStore _store, bytes32 action) internal view returns (string memory resultResource) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 7);
    return (string(_blob));
  }

  /** Set resultResource */
  function setResultResource(bytes32 action, string memory resultResource) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 7, bytes((resultResource)));
  }

  /** Set resultResource (using the specified store) */
  function setResultResource(IStore _store, bytes32 action, string memory resultResource) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 7, bytes((resultResource)));
  }

  /** Push a slice to resultResource */
  function pushResultResource(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 7, bytes((_slice)));
  }

  /** Push a slice to resultResource (using the specified store) */
  function pushResultResource(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 7, bytes((_slice)));
  }

  /** Get resultFunction */
  function getResultFunction(bytes32 action) internal view returns (string memory resultFunction) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 8);
    return (string(_blob));
  }

  /** Get resultFunction (using the specified store) */
  function getResultFunction(IStore _store, bytes32 action) internal view returns (string memory resultFunction) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 8);
    return (string(_blob));
  }

  /** Set resultFunction */
  function setResultFunction(bytes32 action, string memory resultFunction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 8, bytes((resultFunction)));
  }

  /** Set resultFunction (using the specified store) */
  function setResultFunction(IStore _store, bytes32 action, string memory resultFunction) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 8, bytes((resultFunction)));
  }

  /** Push a slice to resultFunction */
  function pushResultFunction(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 8, bytes((_slice)));
  }

  /** Push a slice to resultFunction (using the specified store) */
  function pushResultFunction(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 8, bytes((_slice)));
  }

  /** Get resultType */
  function getResultType(bytes32 action) internal view returns (string memory resultType) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 9);
    return (string(_blob));
  }

  /** Get resultType (using the specified store) */
  function getResultType(IStore _store, bytes32 action) internal view returns (string memory resultType) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 9);
    return (string(_blob));
  }

  /** Set resultType */
  function setResultType(bytes32 action, string memory resultType) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setField(_tableId, _primaryKeys, 9, bytes((resultType)));
  }

  /** Set resultType (using the specified store) */
  function setResultType(IStore _store, bytes32 action, string memory resultType) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setField(_tableId, _primaryKeys, 9, bytes((resultType)));
  }

  /** Push a slice to resultType */
  function pushResultType(bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 9, bytes((_slice)));
  }

  /** Push a slice to resultType (using the specified store) */
  function pushResultType(IStore _store, bytes32 action, string memory _slice) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.pushToField(_tableId, _primaryKeys, 9, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 action) internal view returns (ActionTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 action) internal view returns (ActionTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 action,
    int256 costAmount1,
    int256 costAmount2,
    bool selfTarget,
    int256 resultAmount,
    string memory costResource1,
    string memory costResource2,
    string memory costFunction,
    string memory resultResource,
    string memory resultFunction,
    string memory resultType
  ) internal {
    bytes memory _data = encode(
      costAmount1,
      costAmount2,
      selfTarget,
      resultAmount,
      costResource1,
      costResource2,
      costFunction,
      resultResource,
      resultFunction,
      resultType
    );

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 action,
    int256 costAmount1,
    int256 costAmount2,
    bool selfTarget,
    int256 resultAmount,
    string memory costResource1,
    string memory costResource2,
    string memory costFunction,
    string memory resultResource,
    string memory resultFunction,
    string memory resultType
  ) internal {
    bytes memory _data = encode(
      costAmount1,
      costAmount2,
      selfTarget,
      resultAmount,
      costResource1,
      costResource2,
      costFunction,
      resultResource,
      resultFunction,
      resultType
    );

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 action, ActionTableData memory _table) internal {
    set(
      action,
      _table.costAmount1,
      _table.costAmount2,
      _table.selfTarget,
      _table.resultAmount,
      _table.costResource1,
      _table.costResource2,
      _table.costFunction,
      _table.resultResource,
      _table.resultFunction,
      _table.resultType
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 action, ActionTableData memory _table) internal {
    set(
      _store,
      action,
      _table.costAmount1,
      _table.costAmount2,
      _table.selfTarget,
      _table.resultAmount,
      _table.costResource1,
      _table.costResource2,
      _table.costFunction,
      _table.resultResource,
      _table.resultFunction,
      _table.resultType
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (ActionTableData memory _table) {
    // 97 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 97));

    _table.costAmount1 = (int256(uint256(Bytes.slice32(_blob, 0))));

    _table.costAmount2 = (int256(uint256(Bytes.slice32(_blob, 32))));

    _table.selfTarget = (_toBool(uint8(Bytes.slice1(_blob, 64))));

    _table.resultAmount = (int256(uint256(Bytes.slice32(_blob, 65))));

    uint256 _start;
    uint256 _end = 129;

    _start = _end;
    _end += _encodedLengths.atIndex(0);
    _table.costResource1 = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    _end += _encodedLengths.atIndex(1);
    _table.costResource2 = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    _end += _encodedLengths.atIndex(2);
    _table.costFunction = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    _end += _encodedLengths.atIndex(3);
    _table.resultResource = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    _end += _encodedLengths.atIndex(4);
    _table.resultFunction = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    _end += _encodedLengths.atIndex(5);
    _table.resultType = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int256 costAmount1,
    int256 costAmount2,
    bool selfTarget,
    int256 resultAmount,
    string memory costResource1,
    string memory costResource2,
    string memory costFunction,
    string memory resultResource,
    string memory resultFunction,
    string memory resultType
  ) internal view returns (bytes memory) {
    uint16[] memory _counters = new uint16[](6);
    _counters[0] = uint16(bytes(costResource1).length);
    _counters[1] = uint16(bytes(costResource2).length);
    _counters[2] = uint16(bytes(costFunction).length);
    _counters[3] = uint16(bytes(resultResource).length);
    _counters[4] = uint16(bytes(resultFunction).length);
    _counters[5] = uint16(bytes(resultType).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        costAmount1,
        costAmount2,
        selfTarget,
        resultAmount,
        _encodedLengths.unwrap(),
        bytes((costResource1)),
        bytes((costResource2)),
        bytes((costFunction)),
        bytes((resultResource)),
        bytes((resultFunction)),
        bytes((resultType))
      );
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 action) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 action) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((action));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
