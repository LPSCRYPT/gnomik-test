// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16("gnomik"), bytes16("ResourceTable"))));
uint256 constant ResourceTableTableId = _tableId;

struct ResourceTableData {
  int256 value;
  uint256 lastTimeUpdated;
  int256 rate;
}

library ResourceTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.INT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.INT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "value";
    _fieldNames[1] = "lastTimeUpdated";
    _fieldNames[2] = "rate";
    return ("ResourceTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get value */
  function getValue(bytes32 resource, address gnome) internal view returns (int256 value) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get value (using the specified store) */
  function getValue(IStore _store, bytes32 resource, address gnome) internal view returns (int256 value) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set value */
  function setValue(bytes32 resource, address gnome, int256 value) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((value)));
  }

  /** Set value (using the specified store) */
  function setValue(IStore _store, bytes32 resource, address gnome, int256 value) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((value)));
  }

  /** Get lastTimeUpdated */
  function getLastTimeUpdated(bytes32 resource, address gnome) internal view returns (uint256 lastTimeUpdated) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lastTimeUpdated (using the specified store) */
  function getLastTimeUpdated(
    IStore _store,
    bytes32 resource,
    address gnome
  ) internal view returns (uint256 lastTimeUpdated) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lastTimeUpdated */
  function setLastTimeUpdated(bytes32 resource, address gnome, uint256 lastTimeUpdated) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((lastTimeUpdated)));
  }

  /** Set lastTimeUpdated (using the specified store) */
  function setLastTimeUpdated(IStore _store, bytes32 resource, address gnome, uint256 lastTimeUpdated) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((lastTimeUpdated)));
  }

  /** Get rate */
  function getRate(bytes32 resource, address gnome) internal view returns (int256 rate) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get rate (using the specified store) */
  function getRate(IStore _store, bytes32 resource, address gnome) internal view returns (int256 rate) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set rate */
  function setRate(bytes32 resource, address gnome, int256 rate) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((rate)));
  }

  /** Set rate (using the specified store) */
  function setRate(IStore _store, bytes32 resource, address gnome, int256 rate) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((rate)));
  }

  /** Get the full data */
  function get(bytes32 resource, address gnome) internal view returns (ResourceTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 resource, address gnome) internal view returns (ResourceTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 resource, address gnome, int256 value, uint256 lastTimeUpdated, int256 rate) internal {
    bytes memory _data = encode(value, lastTimeUpdated, rate);

    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 resource,
    address gnome,
    int256 value,
    uint256 lastTimeUpdated,
    int256 rate
  ) internal {
    bytes memory _data = encode(value, lastTimeUpdated, rate);

    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 resource, address gnome, ResourceTableData memory _table) internal {
    set(resource, gnome, _table.value, _table.lastTimeUpdated, _table.rate);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 resource, address gnome, ResourceTableData memory _table) internal {
    set(_store, resource, gnome, _table.value, _table.lastTimeUpdated, _table.rate);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (ResourceTableData memory _table) {
    _table.value = (int256(uint256(Bytes.slice32(_blob, 0))));

    _table.lastTimeUpdated = (uint256(Bytes.slice32(_blob, 32)));

    _table.rate = (int256(uint256(Bytes.slice32(_blob, 64))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(int256 value, uint256 lastTimeUpdated, int256 rate) internal view returns (bytes memory) {
    return abi.encodePacked(value, lastTimeUpdated, rate);
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 resource, address gnome) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 resource, address gnome) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32((resource));
    _primaryKeys[1] = bytes32(bytes20((gnome)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
